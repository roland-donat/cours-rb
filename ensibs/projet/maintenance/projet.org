# -*- coding: utf-8 -*-
#+TITLE: Projet de modélisation stochastique
#+AUTHOR: Roland Donat
#+DATE: ENSIBS - Spécialité Cyber Data

# ==============================================
# Document Configuration
# ======================
# Orgmode
:CONFIG:
#+LANGUAGE: fr
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:{} f:t TeX:t author:t d:nil timestamp:nil
#+OPTIONS: html-postamble:nil
#+STARTUP: content 
#+STARTUP: hidestars
#+DRAWERS: CONFIG OPTIONS CACHE MACROS
#+TODO: TODO(t) INPROGRESS(p) | DONE(d)
#+BIND: org-latex-table-scientific-notation "{%s}E{%s}"
:END:

# HTML
# ----
:CONFIG:
# Org HTML Macros
#+MACRO: NEWLINE @@latex:\\@@ @@html:<br>@@
#+MACRO: HTMLFONTSIZE @@html:<font size="$2">$1</font>@@
#+MACRO: SUBTITLE @@html:<div class="slidesubtitle">$1</div>@@

# HTML options
# ------------
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://edgemind-sas.github.io/visual-identity/official_docs/css/edgemind.css" />
:END:

# ==============================================
# Document starts here
# ====================

#+ATTR_HTML: :width 50% :alt bus maintenance city 2d isometric cartoon white background
#+CAPTION: Image générée par Midjourney
[[./bus_maintenance.png]]


* Contexte et objectifs du projet

Une entreprise de transport collectif cherche à améliorer l'efficacité des opérations de
maintenance réalisées sur ses véhicules. Un axe d'amélioration porte sur l'élaboration de
recommandations visant à assister les mainteneurs dans leurs opérations de maintenance. 

L'entreprise souhaite également mutualiser l'expertise des mainteneurs. En effet, les
mainteneurs, qui sont situés sur différents lieux géographiques, interviennent sur des matériels
analogues sans pouvoir aisément bénéficier de l'expérience de leurs collègues travaillant sur
d'autres sites.

Ce projet vise à apporter des outils d'aide à la décision pour le pilotage de la maintenance et la
réalisation des actions de réparation. La section ref:sec-sujets présente différents travaux à réaliser
pour contribuer à cet objectif. Pour ce faire, des données issues de la GMAO (Gestionnaire de
Maintenance Assisté par Ordinateur) de l'entreprise sont mises à disposition.

*Note importante : les données mises à disposition sont anonymisées mais demeurent néanmoins
confidentielles. Il est donc interdit de diffuser et partager ces données en dehors du cadre du
projet.* 

* Problématique métier

L'entreprise de transport exploite une flotte de véhicules qui circule pendant les horaires de
service. Lorsqu'un problème survient sur un véhicule, le conducteur est chargé de faire un
signalement décrivant le problème perçu. Le conducteur réalise son signalement /via/ une console
électronique dans le véhicule lui permettant de saisir trois informations :
1. l'organe siège de l'anomalie ;
2. le symptôme observé ;
3. une liste d'informations contextuelles sur le lieu ou le phénomène observé.

Il est important d'avoir à l'esprit que ce signalement est une appréciation du conducteur et que ce
dernier peut bien sûr se tromper sur les informations saisies.

En fin de service, le véhicule retourne au dépôt. Les signalements effectués sont transmis dans
l'outil de gestion de la maintenance (GMAO). Chaque signalement donne lieu à un ordre de travail
(OT). Chaque véhicule ayant un OT reste à l'atelier de maintenance jusqu'à ce qu'un mainteneur
résolve le problème et clôture l'OT. Pour ce faire, le mainteneur en charge de l'OT réalisera une ou
plusieurs actions de maintenance, appelées ordres de réparation (ODR). 

L'objectif de ce projet est d'aider les mainteneurs en leur recommandant la ou les actions de maintenance
 les plus appropriées compte tenu des informations provenant du signalement conducteur et des caractéristiques
du véhicule (kilométrage, type de moteur, marque, etc.).



* Présentation des données

Deux sources de données sont mises à disposition dans ce projet :
1. Les [[file:OT_ODR.csv.bz2][données =OT-ODR=]] contenant les OT et ODR associés de la flotte de véhicules entre 2011
   et 2019.
2. Les [[file:EQUIPEMENTS.csv][données =EQUIPEMENTS=]] contenant les caractéristiques des véhicules.

#+BEGIN_SRC python :session :results silent :exports none
import tabulate
#+END_SRC

#+BEGIN_SRC python :session :results silent :exports code
import pandas as pd
import os

ot_odr_filename = os.path.join(".", "OT_ODR.csv.bz2")
ot_odr_df = pd.read_csv(ot_odr_filename,
                        compression="bz2",
                        sep=";")

equipements_filename = os.path.join(".", 'EQUIPEMENTS.csv')
equipements_df = pd.read_csv(equipements_filename,
                             sep=";")
#+END_SRC

** Données =OT-ODR=

Le Tableau [[ref:tab:ot_odr_columns]] donne une description des variables du jeu de données =OT-ODR=.

#+NAME: res:ot_odr_columns
#+attr_latex: :options bgcolor=almostwhite, frame=lines
#+BEGIN_SRC python :session :results raw :exports results
ot_odr_df_var = ot_odr_df.dtypes.to_frame()
ot_odr_df_var["Description"] = ""
ot_odr_df_var.loc["OT_ID", "Description"] = "ID de l'ordre de travail"
ot_odr_df_var.loc["ODR_ID", "Description"] = "ID de l'ordre de réparation"
ot_odr_df_var.loc["ODR_LIBELLE", "Description"] = "Libellé de l'ordre de réparation (action de maintenance)"
ot_odr_df_var.loc["TYPE_TRAVAIL", "Description"] = "Type d'action réalisée associé à l'ODR"
ot_odr_df_var.loc["DUREE_TRAVAIL", "Description"] = "Durée de l'action de maintenance associé à l'ODR"
ot_odr_df_var.loc["SYSTEM_N1", "Description"] = "Identifiant de système de niveau 1 concerné par l'ODR (niveau macroscopique)"
ot_odr_df_var.loc["SYSTEM_N2", "Description"] = "Identifiant de système de niveau 2 concerné par l'ODR"
ot_odr_df_var.loc["SYSTEM_N3", "Description"] = "Identifiant de système de niveau 3 concerné par l'ODR (niveau le plus précis)"
ot_odr_df_var.loc["EQU_ID", "Description"] = "Identifiant du véhicule concerné par l'OT"
ot_odr_df_var.loc["DATE_OT", "Description"] = "Date de création de l'OT"
ot_odr_df_var.loc["KILOMETRAGE", "Description"] = "Nombre de kilométres parcourus par le véhicule au moment de la création de l'OT"
ot_odr_df_var.loc["SIG_ORGANE", "Description"] = "Signalement du conducteur sur la partie organe"
ot_odr_df_var.loc["SIG_CONTEXTE", "Description"] = "Signalement du conducteur sur le contexte de l'anomalie"
ot_odr_df_var.loc["SIG_OBS", "Description"] = "Signalement du conducteur sur le symptôme observé"
ot_odr_df_var.loc["LIGNE", "Description"] = "Identifiant de la ligne du véhicule au moment du signalement conducteur"

tabulate.tabulate(ot_odr_df_var[["Description"]], 
                  headers=["Colonne", "Description"],
                  showindex=True, 
                  tablefmt='orgtbl')
#+END_SRC

#+NAME: tab:ot_odr_columns
#+CAPTION: Définition des variables du jeu de données =OT-ODR=.
#+ATTR_LATEX: :environment tabular :align lp{0.7\textwidth}
#+ATTR_LATEX: :center t
#+ATTR_LATEX: :font \normalsize
#+ATTR_LATEX: :booktabs t
#+RESULTS: res:ot_odr_columns
| Colonne       | Description                                                                     |
|---------------+---------------------------------------------------------------------------------|
| OT_ID         | ID de l'ordre de travail                                                        |
| ODR_ID        | ID de l'ordre de réparation                                                     |
| ODR_LIBELLE   | Libellé de l'ordre de réparation (action de maintenance)                        |
| TYPE_TRAVAIL  | Type d'action réalisée associé à l'ODR                                          |
| DUREE_TRAVAIL | Durée de l'action de maintenance associé à l'ODR                                |
| SYSTEM_N1     | Identifiant de système de niveau 1 concerné par l'ODR (niveau macroscopique)    |
| SYSTEM_N2     | Identifiant de système de niveau 2 concerné par l'ODR                           |
| SYSTEM_N3     | Identifiant de système de niveau 3 concerné par l'ODR (niveau le plus précis)   |
| EQU_ID        | Identifiant du véhicule concerné par l'OT                                       |
| DATE_OT       | Date de création de l'OT                                                        |
| KILOMETRAGE   | Nombre de kilométres parcourus par le véhicule au moment de la création de l'OT |
| SIG_ORGANE    | Signalement du conducteur sur la partie organe                                  |
| SIG_CONTEXTE  | Signalement du conducteur sur le contexte de l'anomalie                         |
| SIG_OBS       | Signalement du conducteur sur le symptôme observé                               |
| LIGNE         | Identifiant de la ligne du véhicule au moment du signalement conducteur         |


** Données =EQUIPEMENTS=

Le Tableau [[ref:tab:equipements_columns]] donne une description des variables du jeu de données =EQUIPEMENTS=.

#+NAME: res:equipements_columns
#+attr_latex: :options bgcolor=almostwhite, frame=lines
#+BEGIN_SRC python :session :results raw :exports results
equipements_df_var = equipements_df.dtypes.to_frame()
equipements_df_var["Description"] = ""
equipements_df_var.loc["EQU_ID", "Description"] = "Identifiant du véhicule"
equipements_df_var.loc["MODELE", "Description"] = "Modèle du véhicule"
equipements_df_var.loc["CONSTRUCTEUR", "Description"] = "Constructeur du véhicule"
equipements_df_var.loc["MOTEUR", "Description"] = "Type de motorisation du véhicule"

tabulate.tabulate(equipements_df_var[["Description"]], 
                  headers=["Colonne", "Description"],
                  showindex=True, 
                  tablefmt='orgtbl')
#+END_SRC

#+NAME: tab:equipements_columns
#+CAPTION: Définition des variables du jeu de données =EQUIPEMENTS=.
#+ATTR_LATEX: :environment tabular :align lp{0.7\textwidth}
#+ATTR_LATEX: :center t
#+ATTR_LATEX: :font \normalsize
#+ATTR_LATEX: :booktabs t
#+RESULTS: res:equipements_columns
| Colonne      | Description                      |
|--------------+----------------------------------|
| EQU_ID       | Identifiant du véhicule          |
| MODELE       | Modèle du véhicule               |
| CONSTRUCTEUR | Constructeur du véhicule         |
| MOTEUR       | Type de motorisation du véhicule |




* Travaux à réaliser
  :PROPERTIES:
  :CUSTOM_ID: sec-sujets
  :END:

** Développement d'une IA de diagnostic 

Ce travail correspond au développement d'un moteur d'aide au diagnostic et à la recommandation de
maintenance. Il s'agit donc en 
pratique d'élaborer un modèle permettant de déduire d'un signalement de panne et des
caractéristiques d'un véhicule en maintenance, la localisation de la panne
(SYSTEM_N1, SYSTEM_N2, SYSTEM_N3) et l'action de maintenance à réaliser (ODR) permettant de remettre 
le véhicule en service. 

Les principaux travaux demandés sont les suivants :
1. Proposer un réseau bayésien pertinent afin de répondre à la
   problématique en argumentant vos choix. 
2. Utiliser les données à disposition pour réaliser un apprentissage des lois du modèle retenu.
3. Évaluer la performance prédictive de votre modèle à partir d'une approche apprentissage/test classique.
4. (Option) Proposer un second modèle et comparer ses performances avec votre premier modèle.

Le travail est à réaliser sous Python en utilisant la [[https://agrum.gitlab.io/pages/pyagrum.html][librairie =PyAgrum=]].
   
** Développement d'un applicatif métier

L'objectif de ce travail est de développer une application permettant d'interagir avec le
   moteur de recommandations de la section précédente de manière transparente pour 
   l'utilisateur final.

L'application devra donc proposer une interface web permettant de :
- saisir les informations nécessaires à la production d'un diagnostic (e.g. signalements,
  caractéristiques d'un véhicule, etc) ;
- réaliser les calculs d'inférence afin de d'estimer les diagnostics ;
- mettre en forme les diagnostics dans l'interface développée.

L'application est à développer avec la librairie [[https://dash.plotly.com/][=Plotly Dash=]]. N'hésitez pas à consulter des
ressources sur internet afin de monter en compétences (e.g. https://dash.plotly.com/tutorial).

* Déroulement pratique et livrables

Le projet est à réaliser par groupe de trois étudiant·es.

Les deux livrables attendus sont :
1. Le lien vers le dépôt github de votre projet.
   - La page principale de votre dépôt doit présenter au minimum une procédure d'installation de
     votre application.
   - Votre application doit fonctionner sur un système Linux standard (e.g. Ubuntu, Débian, etc.).
   - Tous les membres de votre groupe doivent "commiter" sur le projet.
   - *Deadline : 9 juin 2023 14h00*

2. Une restitution orale de votre travail lors de la séance du 9 juin 2023 structurée de la manière
   suivante :
   - 5 min de présentation (4-6 slides), expliquant brièvement l'objectif du projet, les modèles
     réalisés, les performances obtenues et une conclusion.
   - 5 min de démonstration de votre application.
   - 5 min de questions.

* Critères d'évaluation

Vous serez principalement évalué·es sur les critères suivants :
| Item                                                                    | Points |
|-------------------------------------------------------------------------+--------|
| Qualité de la documentation de votre dépôt github                       |  2     |
| Fonctionnement de la procédure d'installation de votre application      |  2     |
| Pertinence des modélisations réalisées pour répondre à la problématique |  3     |
| Mise en oeuvre d'une démarche d'évaluation des performances             |  3     |
| Design de l'application réalisée                                        |  2     |
| Clarté de la présentation orale                                         |  3     |
| Qualité de la démonstration de l'outil                                  |  1     |
| Pertinence des réponses aux questions                                   |  2     |
| Respect de la contrainte temporelle lors de la soutenance.              |  2     |


* Pour se lancer en douceur                                        :noexport:

Chargement des données
#+BEGIN_SRC python :session :results silent :exports code
import pandas as pd
import os

ot_odr_filename = os.path.join(".", "OT_ODR.csv.bz2")
ot_odr_df = pd.read_csv(ot_odr_filename,
                        compression="bz2",
                        sep=";")

equipements_filename = os.path.join(".", 'EQUIPEMENTS.csv')
equipements_df = pd.read_csv(equipements_filename,
                             sep=";")
#+END_SRC





* pyagrum-extra                                                    :noexport:

pip install git+https://github.com/roland-donat/pyagrum-extra.git
